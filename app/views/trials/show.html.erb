<div class="container mx-auto px-4 py-6 max-w-md">
  <%= render Primitives::CardComponent.new(class: "p-6") do |card| %>
    <% card.with_title do %>
      <h1 class="text-xl font-bold text-center"><%= @trial.business_name %></h1>
      <p class="text-sm text-muted-foreground text-center">
        <%= @trial.industry.titleize %> - <%= @trial.scenario.titleize %>
      </p>
    <% end %>

    <% if @trial.expired? %>
      <%= render Primitives::ToastComponent.new(
        variant: :error,
        title: "Trial Expired",
        message: "This trial has expired. Please create a new one."
      ) %>
      <%= link_to "Create New Trial", new_trial_path, 
          class: "inline-flex items-center justify-center rounded-radius-md text-sm font-medium h-11 px-8 w-full bg-primary text-primary-foreground hover:bg-primary/90 transition-colors mt-4" %>
    
    <% elsif !@trial.ready? %>
      <!-- Loading State with Enhanced Polling -->
      <div id="assistant-status" class="space-y-4">
        <div class="flex items-center space-x-3 p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          <div class="flex-1">
            <p class="font-semibold text-blue-900">Creating your AI assistant...</p>
            <p class="text-sm text-blue-700" id="status-message">
              This usually takes 10-20 seconds
            </p>
          </div>
        </div>
        
        <!-- Progress indicator -->
        <div class="text-center text-sm text-muted-foreground">
          <span id="elapsed-time">0s</span> elapsed
        </div>
      </div>

    <% else %>
      <!-- Ready State - Call Form -->
      <div class="space-y-4">
        <div class="p-4 bg-green-50 border border-green-200 rounded-lg">
          <p class="font-semibold text-green-900 mb-2">âœ“ Your assistant is ready!</p>
          <p class="text-sm text-green-700">
            Enter your phone number below and we'll call you in ~10 seconds.
          </p>
        </div>
        
        <%= form_with url: call_trial_path(@trial), method: :post, 
            local: true, class: "space-y-4", 
            data: { controller: "phone-input", action: "submit->phone-input#validateBeforeSubmit" } do |f| %>
          
          <div>
            <label for="phone_number" class="block text-sm font-medium mb-2 text-foreground">
              Phone Number<span class="text-destructive">*</span>
            </label>
            <%= f.text_field :phone_number,
                value: @trial.phone_e164,
                placeholder: "+15555551234",
                id: "phone_number",
                class: "flex h-11 min-h-[44px] w-full rounded-radius-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 transition-colors",
                required: true,
                data: { phone_input_target: "input" } %>
            <p class="mt-2 text-sm text-muted-foreground">
              We'll call this number in ~10 seconds
            </p>
            <p class="mt-2 text-sm text-destructive hidden error-message" role="alert"></p>
          </div>
          
          <div class="text-sm text-muted-foreground">
            Calls remaining: <strong class="text-foreground"><%= @trial.calls_remaining %></strong> of <%= @trial.calls_limit %>
          </div>
          
          <%= render Primitives::ButtonComponent.new(
            type: "submit",
            size: :lg,
            class: "w-full"
          ) do %>
            ðŸ“ž Call Me Now
          <% end %>
        <% end %>

        <!-- Display Recent Calls -->
        <% if @trial.calls.any? %>
          <div class="mt-8">
            <h2 class="text-xl font-bold mb-4">Recent Calls</h2>
            <% @trial.calls.order(created_at: :desc).limit(3).each do |call| %>
              <%= render Voice::CallCardComponent.new(call: call) %>
            <% end %>
          </div>
        <% end %>
      </div>
    <% end %>
  <% end %>
</div>

<script>
  // Enhanced polling with timeout, error handling, and elapsed timer
  <% unless @trial.ready? || @trial.expired? %>
    const MAX_POLL_DURATION = 45000; // 45 seconds timeout
    const POLL_INTERVAL = 3000; // Poll every 3 seconds
    const startTime = Date.now();
    let pollCount = 0;
    let consecutiveErrors = 0;
    
    const statusMessage = document.getElementById('status-message');
    const elapsedTime = document.getElementById('elapsed-time');
    
    const pollInterval = setInterval(async () => {
      pollCount++;
      const elapsed = Math.floor((Date.now() - startTime) / 1000);
      
      // Update elapsed time display
      if (elapsedTime) {
        elapsedTime.textContent = `${elapsed}s`;
      }
      
      // Timeout after 45 seconds
      if (Date.now() - startTime > MAX_POLL_DURATION) {
        clearInterval(pollInterval);
        if (statusMessage) {
          statusMessage.innerHTML = 
            'This is taking longer than expected. <a href="<%= trial_path(@trial) %>" class="underline font-medium">Refresh page</a> or contact support if issue persists.';
        }
        return;
      }
      
      try {
        const response = await fetch('<%= trial_path(@trial, ready: 1) %>');
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}`);
        }
        
        const data = await response.json();
        
        // Reset error counter on successful poll
        consecutiveErrors = 0;
        
        if (data.ready) {
          clearInterval(pollInterval);
          window.location.reload();
        } else if (data.expired) {
          clearInterval(pollInterval);
          window.location.reload();
        }
      } catch (error) {
        console.error('Poll error:', error);
        consecutiveErrors++;
        
        // Show error message after 5 consecutive failures
        if (consecutiveErrors >= 5) {
          if (statusMessage) {
            statusMessage.innerHTML = 
              'Connection issue. Retrying... <a href="<%= trial_path(@trial) %>" class="underline font-medium">Refresh</a> if this persists.';
          }
        }
        
        // Stop polling after 10 consecutive errors
        if (consecutiveErrors >= 10) {
          clearInterval(pollInterval);
          if (statusMessage) {
            statusMessage.innerHTML = 
              'Unable to check status. Please <a href="<%= trial_path(@trial) %>" class="underline font-medium">refresh the page</a>.';
          }
        }
      }
    }, POLL_INTERVAL);
    
    // Clean up interval if user leaves page
    window.addEventListener('beforeunload', () => {
      clearInterval(pollInterval);
    });
  <% end %>
</script>

